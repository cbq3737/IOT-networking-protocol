프로토콜:통신규약,통신절차
IOT(Internet of Things):사물인터넷 => 만물 인터넷(Internet of Everything)
:통신 프로토콜 => socket programming(C/Java/Python/..)을 해야한다.
ex)자율형농장 등 그린오션
-데이터 통신 프로토콜,이 통신은 데이터 망 vs 통신(communications),이 통신은 전화망 :데이터망과 전화망은 관계가없다. 그냥 통신은 전화망을 말하고 데이터 통신이 우리가 다루는 망임.
- 데이터 망 == IP 망 == 인터넷 == TCP/IP == 패킷 교환망 == 패킷망  => 4G/5G를 뜻함. <=> 전화망(데이터망과 상대되는 개념,==회선망 ==회선교환망)
- 망(network) : 전화망(telecommunication network):1800년대 후반,기본적으로 1:1통신(양방향) | 방송망(broadcast network):1900년대,1:다 통신(단방향) | 인터넷망,데이터망(data network):1960년대,다:다,1:다 통신(단방향,양방향)

-OSI의 7계층:물데네트세표응, 아래 적힌것들은 반드시 다 외워놓을것.(빈칸은 해당사항이 없거나 아직 허가가 나지않았거나), 기능 ex) Node=hop, delivery=communication

7계층(Application Layer)응용 계층:  전송단위:데이터(data),메세지(message),  주소:호스트네임(host name)  
실제주소:ex)www.google.com  ,기능:  ,프로토콜의 예:FTP,HTTP,SSH

6계층(Presentation Layer)표현 계층:  전송단위:  ,주소:  
,실제주소,  기능:  ,프로토콜의 예:mp4,mpeg,avi,gif,bmp

5계층(Session Layer)세션 계층:  전송단위:  ,주소:  
실제주소:  ,기능:  ,프로토콜의 예:

4계층(Tranport Layer)전송 계층:  전송단위:세그먼트(segment),  주소:포트주소(port address)  ,
실제주소:ex)80,8000,8080등 포트주소  ,기능:프로세스 간 통신(process-to process delivery)==포트 간 통신(port-to-port delivery)  ,프로토콜의 예:UDP,TCP

3계층(Network Layer)네트워크 계층:  전송단위:패킷(packet),데이터그램(datagram),  주소:논리주소(logical address)  ,
실제주소:ex)192.168.25.34 등(32 bit IP address)  ,기능:종단 간 통신(end node-to-end delivery,end host-to-end host delivery)  ,프로토콜의 예:IP프로토콜,라우팅 프로토콜

2계층(DataLink Layer)데이터링크 계층:  전송단위:프레임(frame),  주소:물리주소(physical address)  ,
실제주소:fe80::4d51:a24b:92ec:f984%4 등 (48bit ethernet address)(이더넷 프레임 주소)  ,기능:노드 간 통신(node-to-node delivery)  ,프로토콜의 예:이더넷,wifi,bluetooth

1계층(Physical Layer)물리계층:  전송단위:비트(bit),비트열(bit stream),  주소:  ,
실제주소:  ,기능:  ,프로토콜의 예:

윈도우 확인명령어:ipconfig, 우분투:ifconfig(lo:는 loopback주소 인 127.0.0.1임) , 물리계층과 데이터계층의 물리주소 헷갈리지말것.

같은 호스트든 서로 다른 호스트간의 프로세스간 통신 가능하게 하는 연결도구: 소켓(socket)
소켓 프로그래밍 == 네트워크 프로그래밍: 네트워크로 연결된 둘 이상의 컴퓨터 사이에서의 데이터 송수신(프로세스 간 통신) 프로그램의 작성(전송계층) 
소켓을 생성할때 서버와 클라이언트가 조금씩 다름
서버(서비스를 제공하는쪽):1.소켓 생성(socket()함수) ->2.IP와 PORT번호 할당(bind()함수) ->3,연결요청 가능상태로 변경(listen함수)->4.연결요청에 대한 수락(accept함수)
클라이언트(요청하는쪽):1.소켓 생성(socket()함수)->2.연결(connect()함수)
server의 비유:1.전화기 삼(API로써 소켓) 2.유심,전화번호 할당(bind) 3.전화오기를 기다림(listen) 4.전화받기(accpet)
client의 비유:1.전화기 삼(API로써 소켓) 2.전화걸음(connect)

**socket()
socket의 argument:1.도메인 2.타입 3.프로토콜 :성공시 0,실패시 -1반환
연결지향형 소켓(socket_stream,TCP소켓):connection-oriented socket
비 연결지향형 소켓(sock_dgram,UDP소켓(3계층의 패킷과 데이터 그램중 4계층의 UDP얘기하면서 3계층에 얘기를하려면 반드시 데이터그램을 이용하여 얘기를해야한다.반대로 패킷은 TCP용어를 사용해서 말을해야한다.)):connectionless socket
socketserver.c에 실행할때 커맨드라인 argument로 포트번호를 같이주고 실행하면 server가 client를 기다리고 있고,그 포트에 맞춰서 socketclient.c와 포트번호를 입력하고 실행시키면 바로 접속이 가능해진다.
htons(atoi(argv[i])): htons 함수는 short형 데이터를 호스트 바이트 순서에서 네트워크가 알수있도록 바이트순서로 바꿔달라라는말, 반대로 ntohs는 shor형 데이터를 네트워크 바이트 순서에서 호스트가 알수있도록 바꿔달라는말 
socketserver.c코드를 보면 sockaddr_in{sin_family(주소체계),sin_port(port번호),sin_addr(32비트 ip주소인데 얘 역시 구조체임, 이 구조체 안에 in_addr,sin_addr이 있음),sin_zero[8](사용안됨)}이라는 구조체를 사용한다.
server_addr.sin_addr.s_addr = htonl(INADDR_ANY);이라고 되어있는데 INADDR_ANY은 internet address any라고 되어있는데 내 ip(파이썬에 self와 비슷)를사용하여 내가 일일히 주소를 안적어도 된다는 의미.아무튼 htols이므로 host ro long으로 바꿔줘서 네트워크에 전달됨.
그런데 socketclient.c의 client_addr.sin_addr.s_addr = inet_addr(IPADDR);로 되어있는데(참고로 IPADDR은 127.0.0.1로 define되어있음) inet_addr(IPADDR)이건 inet_addr("127.0.0.1")과 같다.이 방법은 htonl(INADDR_ANY)와 달리 IP를 직접 주는 방식임.IP를 주는방법은 이렇게 두가지 방법 외에 포트 번호처럼 ./socketclient 1234 127.0.0.1로 커맨드라인으로 줄 수 있다.
또 ip주소를 주는방법에는 htonl(INADDR_ANY),inet_addr("127.0.0.1"),커맨드라인으로 inet_addr(argv[1])주는방법 등 세가지 방법, 포트에 커맨드 라인으로 주는 client_addr.sin_port = htons(atoi(argv[2])),client_addr.sin_port = htons(PORT)주는 두가지 방법이있다.
또 sin.family인 주소체계는 AF_INET방식처럼 인터넷 방식으로 주소체계방식을 줄 수 있다.

*******************************************************************************************************************************************
client 에서:
- 서버 주소를 hard-coded(define하는 방법)시킬때:client_addr.sin_addr.s_addr = inet_addr(IPADDR);(PADDR은 "127.0.0.1"로 define) | inet_addr("127.0.0.1");
- 서버 주소를 입력받을 때 : client_addr.sin_addr.s_addr = inet_addr(argv[1]);
- 포트 번호를 hard-coded(define하는 방법)시킬때:client_addr.sin_port = htons(PORT);
- 포트 번호를 입력받을 때  :client_addr.sin_port = htons(atoi(argv[1]));

**server(client)_addr.sin_addr.s_addr =htonl(argv[2]); ->이거는 말이 안됨. 그리고 port 는 integer형으로, addr은 string형으로 주는게 중요함.

server 에서:
- 서버 주소를 hard-coded 시킬 때, 3가지: server_addr.sin_addr.s_addr =htonl(INADDR_ANY); | inet_addr("127.0.0.1"); | inet_addr("ADDR");(ADDR은 "127.0.0.1"로 define)
- 서버 주소를 입력받을때:server_addr.sin_addr.s_addr = inet_addr(argv[1]); (단 PORT도 입력을 받는 다면 argc의 개수를 변경해줘야함.)
- 포트번호를 hard-coded 시킬 때:server_addr.sin_port = htons(PORT);
- 포트 번호를 입력받을 때: server_addr.sin_port = htons(atoi(argv[1]));

*******************************************************************************************************************************************

**bind()
주소 할당 및 연결
int bind(int socketid, strict sockaddr *myaddr,socklen_t addrlen): 성공시 0, 실패시 -1반환

**listen()
int listen(int sockfd,int backlog) :성공시 0,실패시 -1 반환
